/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState, forwardRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { staticFile, useCurrentFrame, useVideoConfig } from 'remotion';
import { useRemotionLipSync } from './hooks/lipSync/useRemotionLipSync';
import { useBlinkLogic } from './hooks/useBlinkLogic';

const AVATAR_LOG_PREFIX = "[Avatar.jsx]";

const defaultEyeMorphTargetNames = {
  left: 'eyeBlinkLeft',
  right: 'eyeBlinkRight',
};

export function Avatar({
  modelUrl,
  mouthCuesUrl,
  lipSyncOptions,
  blinkEnabled = true,
  blinkIntervalFrames = 120,
  blinkDurationFrames = 9,
  eyeMorphTargetNames = defaultEyeMorphTargetNames,
  ...props
}) {
  const { ...restProps } = props;
  const group = useRef();

  // Load model - simplified without delayRender
  let nodes, materials, animations;
  try {
    const gltfData = useGLTF(modelUrl);
    nodes = gltfData.nodes;
    materials = gltfData.materials;
    animations = gltfData.animations;
  } catch (error) {
    console.error(AVATAR_LOG_PREFIX, `Error loading GLTF model:`, error);
    return null;
  }
  
  const { actions } = useAnimations(animations, group);

  const [headMorphDict, setHeadMorphDict] = useState(undefined);
  const [teethMorphDict, setTeethMorphDict] = useState(undefined);
  const frame = useCurrentFrame();

  useEffect(() => {
    if (nodes?.Wolf3D_Head?.morphTargetDictionary) {
      setHeadMorphDict(nodes.Wolf3D_Head.morphTargetDictionary);
    }
    if (nodes?.Wolf3D_Teeth?.morphTargetDictionary) {
      setTeethMorphDict(nodes.Wolf3D_Teeth.morphTargetDictionary);
    }
  }, [nodes]);

  const { head: headInfluencesFromLipSync, teeth: teethInfluencesFromLipSync } = useRemotionLipSync(
    mouthCuesUrl,
    headMorphDict,
    teethMorphDict,
    lipSyncOptions
  );

  const eyeInfluence = useBlinkLogic({
    blinkIntervalFrames,
    blinkDurationFrames,
  });

  let finalHeadInfluences;
  if (headInfluencesFromLipSync && headMorphDict) {
    finalHeadInfluences = [...headInfluencesFromLipSync];
    if (blinkEnabled && eyeMorphTargetNames) {
      const leftEyeIndex = headMorphDict[eyeMorphTargetNames.left];
      const rightEyeIndex = headMorphDict[eyeMorphTargetNames.right];

      if (leftEyeIndex !== undefined) {
        finalHeadInfluences[leftEyeIndex] = eyeInfluence;
      }
      if (rightEyeIndex !== undefined) {
        finalHeadInfluences[rightEyeIndex] = eyeInfluence;
      }
    }
  } else if (nodes?.Wolf3D_Head?.morphTargetDictionary) {
    const numMorphs = Object.keys(nodes.Wolf3D_Head.morphTargetDictionary).length;
    finalHeadInfluences = new Array(numMorphs).fill(0);
    if (blinkEnabled && eyeMorphTargetNames && nodes.Wolf3D_Head.morphTargetDictionary) {
        const headDict = nodes.Wolf3D_Head.morphTargetDictionary;
        const leftEyeIndex = headDict[eyeMorphTargetNames.left];
        const rightEyeIndex = headDict[eyeMorphTargetNames.right];
        if (leftEyeIndex !== undefined) finalHeadInfluences[leftEyeIndex] = eyeInfluence;
        if (rightEyeIndex !== undefined) finalHeadInfluences[rightEyeIndex] = eyeInfluence;
    }
  } else {
    finalHeadInfluences = [];
  }

  const teethInfluences = teethInfluencesFromLipSync ||
    (nodes?.Wolf3D_Teeth?.morphTargetDictionary
      ? new Array(Object.keys(nodes.Wolf3D_Teeth.morphTargetDictionary).length).fill(0)
      : []);

  const currentFrame = useCurrentFrame();
  const { fps } = useVideoConfig();

  useEffect(() => {
    const sittingAction = actions?.Sitting;
    if (sittingAction) {
      sittingAction.play();
      sittingAction.paused = true;
    }
  }, [actions]);

  useEffect(() => {
    const sittingAction = actions && actions['Sitting'];
    if (sittingAction && sittingAction.getClip()) { 
      const clipDuration = sittingAction.getClip().duration;
      if (fps > 0 && clipDuration > 0) {
        const animationTime = (currentFrame / fps) % clipDuration;
        sittingAction.time = animationTime;
      }
    }
  }, [currentFrame, fps, actions]);

  if (!nodes || Object.keys(nodes).length === 0) {
    return null;
  }

  return (
    <group ref={group} {...restProps} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <skinnedMesh
            name="EyeLeft"
            geometry={nodes.EyeLeft.geometry}
            material={materials['Wolf3D_Eye.002']}
            skeleton={nodes.EyeLeft.skeleton}
            morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
            morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
          />
          <skinnedMesh
            name="EyeRight"
            geometry={nodes.EyeRight.geometry}
            material={materials['Wolf3D_Eye.002']}
            skeleton={nodes.EyeRight.skeleton}
            morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
            morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
          />
          <group name="Hair">
            <skinnedMesh
              name="HairData001"
              geometry={nodes.HairData001.geometry}
              material={materials['GIRL_HAIR_2.004']}
              skeleton={nodes.HairData001.skeleton}
            />
            <skinnedMesh
              name="HairData001_1"
              geometry={nodes.HairData001_1.geometry}
              material={materials['lambert2.003']}
              skeleton={nodes.HairData001_1.skeleton}
            />
          </group>
          <skinnedMesh
            name="Wolf3D_Body"
            geometry={nodes.Wolf3D_Body.geometry}
            material={materials['Wolf3D_Body.002']}
            skeleton={nodes.Wolf3D_Body.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Glasses"
            geometry={nodes.Wolf3D_Glasses.geometry}
            material={materials['Wolf3D_Glasses.002']}
            skeleton={nodes.Wolf3D_Glasses.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Head"
            geometry={nodes.Wolf3D_Head.geometry}
            material={materials['Wolf3D_Skin.002']}
            skeleton={nodes.Wolf3D_Head.skeleton}
            morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
            morphTargetInfluences={finalHeadInfluences}
          />
          <skinnedMesh
            name="Wolf3D_Outfit_Bottom"
            geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
            material={materials['Wolf3D_Outfit_Bottom.002']}
            skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Outfit_Footwear"
            geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
            material={materials['Wolf3D_Outfit_Footwear.002']}
            skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Outfit_Top"
            geometry={nodes.Wolf3D_Outfit_Top.geometry}
            material={materials['Wolf3D_Outfit_Top.002']}
            skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Teeth"
            geometry={nodes.Wolf3D_Teeth.geometry}
            material={materials['Wolf3D_Teeth.002']}
            skeleton={nodes.Wolf3D_Teeth.skeleton}
            morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
            morphTargetInfluences={teethInfluences}
          />
          <primitive object={nodes.Hips} />
        </group>
      </group>
    </group>
  )
}


